#ifndef SCENEMANAGER_IMPLEMENT_H_
#define SCENEMANAGER_IMPLEMENT_H_

class SceneManager_Implement
{
public: __thiscall SceneManager_Implement::SceneManager_Implement(class SceneManager_Implement const &)
public: __thiscall SceneManager_Implement::SceneManager_Implement(struct HWND__ *)
public: virtual __thiscall SceneManager_Implement::~SceneManager_Implement(void)
public: class SceneManager_Implement & __thiscall SceneManager_Implement::operator=(class SceneManager_Implement const &)
public: bool __thiscall SceneManager_Implement::GetDrawWarmAir(void)
public: bool __thiscall SceneManager_Implement::IsIRMode(void)
public: bool __thiscall SceneManager_Implement::isBelowOvercast(float)
public: bool __thiscall SceneManager_Implement::isLayerFog(void)
public: bool __thiscall SceneManager_Implement::isOvercast(void)
public: class ClipVolumeInclined & __thiscall SceneManager_Implement::GetShadowVolume(void)
public: class Graphics::Material * __thiscall SceneManager_Implement::GetShadowMaterial(void)
public: class Graphics::RenderParser * __thiscall SceneManager_Implement::GetSurfaceParser(void)
public: class HeapVector<class Graphics::VolumeEffect *> * __thiscall SceneManager_Implement::GetShadowEffects(void)
public: enum ShadowLevel __thiscall SceneManager_Implement::GetShadowLevel(void)
public: float __thiscall SceneManager_Implement::GetFogOpacity(class Vector3 const &,class Vector3 const &,float &,float &)
public: float __thiscall SceneManager_Implement::GetObjectOpacity(class viObjectShape *,class smCamera_Implement *,float &,float &,struct wShape *)
public: virtual class gLabels & __thiscall SceneManager_Implement::GetLabels(void)
public: virtual class smCamera * __thiscall SceneManager_Implement::DefaultCamera(enum vCameraType_e)
public: virtual void __thiscall SceneManager_Implement::CommandSet(int)
public: virtual void __thiscall SceneManager_Implement::Draw(class Position3 const &,enum vCameraType_e)
public: virtual void __thiscall SceneManager_Implement::DrawWaitScreen(float)
public: virtual void __thiscall SceneManager_Implement::MakeScreenshot(struct HINSTANCE__ *)
public: virtual void __thiscall SceneManager_Implement::Render(void)
public: virtual void __thiscall SceneManager_Implement::RenderUI(void)
public: virtual void __thiscall SceneManager_Implement::SetLabelsEnable(bool)
public: virtual void __thiscall SceneManager_Implement::ShowFirstFrames(bool)
public: virtual void __thiscall SceneManager_Implement::ShowProgress(float,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
public: virtual void __thiscall SceneManager_Implement::StartInterface(struct HWND__ *)
public: virtual void __thiscall SceneManager_Implement::StartSimulation(struct HWND__ *)
public: virtual void __thiscall SceneManager_Implement::ToggleFPS(void)
public: virtual void __thiscall SceneManager_Implement::UpdateParams(void)
public: void * __thiscall SceneManager_Implement::GetShadowContext(void)
public: void __thiscall SceneManager_Implement::GetFogDistances(float &,float &)
public: void __thiscall SceneManager_Implement::RenderEnvironment(int)
public: void __thiscall SceneManager_Implement::RenderMFD(void)
public: void __thiscall SceneManager_Implement::RenderMirrors(void)
public: void __thiscall SceneManager_Implement::RenderScene(class smCamera *,bool)
private: bool __thiscall SceneManager_Implement::CheckGroundProximity(class smCamera *)
private: class Graphics::Texture * __thiscall SceneManager_Implement::GetProcTexture(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
private: double __thiscall SceneManager_Implement::GetVisualTime(void)
private: double __thiscall SceneManager_Implement::VisualDeltaTime(double,double)
private: int __thiscall SceneManager_Implement::DrawObjects(unsigned long,class smCamera_Implement *,bool (__cdecl*)(class viObject *,class viSearch *,void *))
private: int __thiscall SceneManager_Implement::ParseObjects(class smCamera_Implement *)
private: void __thiscall SceneManager_Implement::DistributeEffects(class smCamera *)
private: void __thiscall SceneManager_Implement::DrawOvercast(class smCamera_Implement *,float)
private: void __thiscall SceneManager_Implement::DrawSea(class smCamera_Implement *,bool)
private: void __thiscall SceneManager_Implement::DrawSky(class smCamera_Implement *)
private: void __thiscall SceneManager_Implement::DrawZSurface(class smCamera_Implement *)
private: void __thiscall SceneManager_Implement::ParseSurface(class smCamera_Implement *)
private: void __thiscall SceneManager_Implement::PrintStats(void)
private: void __thiscall SceneManager_Implement::RenderFogDome(class smCamera_Implement *,bool)
private: void __thiscall SceneManager_Implement::RenderSurface(class smCamera_Implement *,bool)
private: void __thiscall SceneManager_Implement::RetrieveFXQuality(void)
private: void __thiscall SceneManager_Implement::RetrieveOvercast(class Vector3 const &)
private: void __thiscall SceneManager_Implement::SetCoordsToCamera(class smCamera *)
private: void __thiscall SceneManager_Implement::SetCoordsToWorld(class smCamera *)
private: void __thiscall SceneManager_Implement::SetGlobalEffectsOrigin(class Vector3 const &)
private: void __thiscall SceneManager_Implement::SetGlobalFog(void)
private: void __thiscall SceneManager_Implement::SetGlobalLights(float,float,float)
private: void __thiscall SceneManager_Implement::UpdateCameraVelocity(void)
const SceneManager_Implement::`vftable'
};

#endif

